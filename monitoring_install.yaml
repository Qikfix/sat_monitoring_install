---
# set nu cuc autoindent tabstop=2
- name: Play for monitoring installation on Satellite
  hosts: localhost
  become: true

  tasks:
    # To collect the package information,
    # used for some tests
    - name: Gather the package facts
      ansible.builtin.package_facts:

#    ## Debug Section here ##
#    - name: debug
#      ansible.builtin.debug:
#        var: ansible_facts['packages']['pcp']
#
#    - name: debug 2
#      when: ('pcp' not in ansible_facts['packages']) or
#            ('pcp-pmda-apache' not in ansible_facts['packages'])
#      ansible.builtin.debug:
#        msg: HERE "{{ ansible_facts['packages']['pcp'] }}"


#   Chapter 3. Setting up the metrics monitoring solution
#   
#   3.1. Installing PCP
#   
#   Install the PCP packages:
#   ---
#   satellite-maintain packages install pcp \
#   pcp-pmda-apache \
#   pcp-pmda-openmetrics \
#   pcp-pmda-postgresql \
#   pcp-pmda-redis \
#   pcp-system-tools \
#   foreman-pcp
   
    - block:

        - name: Install the PCP packages using "satellite-maintain packages install"
          ansible.builtin.command: satellite-maintain packages install -y pcp \
                                   pcp-pmda-apache \
                                   pcp-pmda-openmetrics \
                                   pcp-pmda-postgresql \
                                   pcp-pmda-redis \
                                   pcp-system-tools \
                                   foreman-pcp
      
      when: ('pcp' not in ansible_facts['packages']) or
            ('pcp-pmda-apache' not in ansible_facts['packages']) or
            ('pcp-pmda-openmetrics' not in ansible_facts['packages']) or
            ('pcp-pmda-postgresql' not in ansible_facts['packages']) or
            ('pcp-pmda-redis' not in ansible_facts['packages']) or
            ('pcp-system-tools' not in ansible_facts['packages']) or
            ('foreman-pcp' not in ansible_facts['packages'])


#   Enable and start the Performance Metrics Collector daemon and Performance Metrics Logger daemon: 
#   ---
#   systemctl enable --now pmcd pmlogger
#   ---

    - name: Enable and start the Performance Metrics Collector daemon and Performance Metrics Logger daemon
      loop:
          - pmcd
          - pmlogger
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: started
   
   
#   3.2. Configuring PCP data collection
#   
#   Symlink the Satellite specific configuration to PMDA process monitoring:
#   ---
#   ln -s /etc/pcp/proc/foreman-hotproc.conf /var/lib/pcp/pmdas/proc/hotproc.conf
#   ---

    - name: Symlink the Satellite specific configuration to PMDA process monitoring
      ansible.builtin.file:
        src: /etc/pcp/proc/foreman-hotproc.conf
        dest: /var/lib/pcp/pmdas/proc/hotproc.conf
        owner: root
        group: root
        state: link
   
#   Install the process monitoring PMDA:
#   ---
#   cd /var/lib/pcp/pmdas/proc
#   ./Install
#   ---

    - name: Install the process monitoring PMDA
      ansible.builtin.shell: cd /var/lib/pcp/pmdas/proc && ./Install
  
#   Enable the Apache HTTP Server extended status module: 
#   ---
#   satellite-installer --enable-apache-mod-status
#   ---

    - name: Enable the Apache HTTP Server extended status module
      ansible.builtin.shell: satellite-installer --enable-apache-mod-status
   
#   Enable the Apache HTTP Server PMDA: 
#   ---
#   cd /var/lib/pcp/pmdas/apache
#   ./Install
#   ---
   
    - name: Enable the Apache HTTP Server PMDA
      ansible.builtin.shell: cd /var/lib/pcp/pmdas/apache && ./Install
   
#   Configure PCP to collect metrics from PostgreSQL: 
#   ---
#   cd /var/lib/pcp/pmdas/postgresql
#   ./Install
#   ---
   
    - name: Configure PCP to collect metrics from PostgreSQL
      ansible.builtin.shell: cd /var/lib/pcp/pmdas/postgresql && ./Install

#   Enable the telemetry feature in Satellite: 
#   ---
#   satellite-installer --foreman-telemetry-prometheus-enabled true
#   ---

    - name: Enable the telemetry feature in Satellite
      ansible.builtin.shell: satellite-installer --foreman-telemetry-prometheus-enabled true

#   Configure PCP to collect data from Satellite:
#   ---
#   cd /var/lib/pcp/pmdas/openmetrics
#   echo "https://satellite.example.com/metrics" > config.d/foreman.url
#   ./Install
#   ---

    - name: Configure PCP to collect data from Satellite
      ansible.builtin.shell: echo $(hostname -f) > /var/lib/pcp/pmdas/openmetrics/config.d/foreman.url && cd /var/lib/pcp/pmdas/openmetrics && ./Install
   
#   Restart PCP to begin data collection:
#   ---
#   systemctl restart pmcd pmlogger
#   ---

    - name: Restart PCP to begin data collection
      tags:
        - restart_pcp
      loop:
          - pmcd
          - pmlogger
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: restarted

   
#   3.3. Verifying PCP configuration
#   
#   Print a summary of the active PCP configuration: 
#   ---
#   pcp
#   ---
#   
#   // Expected output
#   ---
#   Performance Co-Pilot configuration on satellite.example.com:
#   
#    platform: Linux satellite.example.com 4.18.0-372.32.1.el8_6.x86_64 #1 SMP Fri Oct 7 12:35:10 EDT 2022 x86_64
#    hardware: 16 cpus, 2 disks, 1 node, 31895MB RAM
#    timezone: UTC
#    services: pmcd pmproxy
#        pmcd: Version 5.3.7-17, 13 agents, 4 clients
#        pmda: root pmcd proc pmproxy xfs redis linux apache mmv kvm
#              postgresql jbd2 openmetrics
#    pmlogger: primary logger: /var/log/pcp/pmlogger/satellite.example.com/20230831.00.10
#        pmie: primary engine: /var/log/pcp/pmie/satellite.example.com/pmie.log
#   ---
   


   
#   3.4. Enabling web UI access to metrics
#   
#   Install Grafana and the Grafana PCP plugin on your Satellite Server: 
#   ---
#   satellite-maintain packages install grafana grafana-pcp
#   ---

    - block:

        - name: Install Grafana and the Grafana PCP plugin on your Satellite Server
          ansible.builtin.command: satellite-maintain packages install -y grafana \
                                   grafana-pcp
      
      when: ('grafana' not in ansible_facts['packages']) or
            ('grafana-pcp' not in ansible_facts['packages'])
   
#   Start and enable the Grafana web service and the PCP proxy service:
#   ---
#   # systemctl enable --now pmproxy grafana-server
#   ---

    - name: Start and enable the Grafana web service and the PCP proxy service
      tags:
        - enable_start_grafana
      loop:
          - pmproxy
          - grafana-server
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: started
   
#   Open the firewall port to allow access to the Grafana web interface:
#   ---
#   # firewall-cmd --permanent --add-service=grafana
#   ---

    - name: Gather the service facts
      tags:
        - open_firewall
      ansible.builtin.service_facts:

#    - name: check
#      tags:
#        - open_firewall
#      ansible.builtin.debug:
#        var: ansible_facts['services']['firewalld.service']['state']


    - name: Open the firewall port to allow access to the Grafana web interface
      tags:
        - open_firewall
      when: (ansible_facts['services']['firewalld.service']['state'] == "running")
      ansible.builtin.shell: firewall-cmd --permanent --add-service=grafana

#   Reload the firewall configuration to apply the changes:
#   ---
#   # firewall-cmd --reload
#   ---

    - name: Reload the firewall configuration to apply the changes
      when: (ansible_facts['services']['firewalld.service']['state'] == "running")
      ansible.builtin.shell: firewall-cmd --reload

  
#   ## Redis
#   
#   Install PCP Redis and configure Grafana to load it
#   ---
#   
#   Install the redis package:
#   ---
#   # yum module install redis:6
#   ---

    - name: Install the redis package
      tags:
        - install_redis
      ansible.builtin.shell: yum module install redis:6 -y

#   Start and enable the following services:
#   ---
#   # systemctl start pmproxy redis
#   # systemctl enable pmproxy redis
#   ---

    - name: Start and enable the following services (pmproxy and redis)
      loop:
          - pmproxy 
          - redis
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: started
  
#   Restart the grafana-server:
#   ---
#   # systemctl restart grafana-server
#   ---

    - name: Restart the grafana-server
      loop:
          - grafana-server
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: restarted
   
#   Ensure that the pmproxy and redis are working:
#   ---
#   # pmseries disk.dev.read
#   2eb3e58d8f1e231361fb15cf1aa26fe534b4d9df
#   
#   TEST == "This command does not return any data if the redis package is not installed."
#   
#   
#   ## Access the Grafana web UI, enable the PCP plugin, and add PCP Redis as a data source
#
#


# ## 10.8. Installing PCP bpftrace
# 
# ### 10.7. Setting up authentication between PCP components
# 
# Procedure
# 
# Install the sasl framework for the scram-sha-256 authentication mechanism:
# ---
# # yum install cyrus-sasl-scram cyrus-sasl-lib
# ---

    - block:

        - name: Install the sasl framework for the scram-sha-256 authentication mechanism
          ansible.builtin.command: satellite-maintain packages install -y cyrus-sasl-scram \
                                   cyrus-sasl-lib
      
      when: ('cyrus-sasl-scram' not in ansible_facts['packages']) or
            ('cyrus-sasl-lib' not in ansible_facts['packages'])
 
 
# Specify the supported authentication mechanism and the user database path in the pmcd.conf file:
# ---
# # vi /etc/sasl2/pmcd.conf
# 
# mech_list: scram-sha-256
# 
# sasldb_path: /etc/pcp/passwd.db
# ---

    - name: Specify the supported authentication mechanism and the user database path in the pmcd.conf file
      tags:
        - check_here
      ansible.builtin.lineinfile:
        path: /etc/sasl2/pmcd.conf
        regexp: '^mech_list'
        line: "mech_list: scram-sha-256"
 
# Create a new user:
# ---
# # useradd -r metrics
# ---
# Replace metrics by your user name.
# 
    - name: Create a new user
      tags:
        - check_here
      ansible.builtin.user:
        name: metrics
        system: true

# Add the created user in the user database:
# ---
# # saslpasswd2 -a pmcd metrics
# 
# Password:
# Again (for verification):
# ---
# # echo 123 | saslpasswd2 -p -a pmcd wally

    - name: Add the created user in the user database
      tags:
        - check_here
      ansible.builtin.shell: echo Secret123 | saslpasswd2 -p -a pmcd metrics

# To add the created user, you are required to enter the metrics account password.
# 
# Set the permissions of the user database:
# ---
# # chown root:pcp /etc/pcp/passwd.db
# # chmod 640 /etc/pcp/passwd.db
# ---

    - name: Set the permissions of the user database
      tags:
        - check_here
      ansible.builtin.file:
        path: /etc/pcp/passwd.db
        owner: root
        group: pcp
        mode: '0640'

# Restart the pmcd service:
# ---
# # systemctl restart pmcd
# ---
#
    - name: Restart the pmcd service
      tags:
        - check_here
      loop:
          - pmcd
          - pmproxy
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: restarted

 
# Verification steps
# 
# Verify the sasl configuration:
# ---
# # pminfo -f -h "pcp://127.0.0.1?username=metrics" disk.dev.read
# Password:
# disk.dev.read
# inst [0 or "sda"] value 19540
# ---
# 
# 
# 
# ### 
# 
# Procedure
# 
# Install the pcp-pmda-bpftrace package:
# ---
# # yum install pcp-pmda-bpftrace
# ---

    - block:

        - name: Install the pcp-pmda-bpftrace package
          ansible.builtin.command: satellite-maintain packages install -y pcp-pmda-bpftrace
      
      when: ('pcp-pmda-bpftrace' not in ansible_facts['packages'])

# Edit the bpftrace.conf file and add the user that you have created in the {setting-up-authentication-between-pcp-components}:
# ---
# # vi /var/lib/pcp/pmdas/bpftrace/bpftrace.conf
# 
# [dynamic_scripts]
# enabled = true
# auth_enabled = true
# allowed_users = root,metrics
# ---
# Replace metrics by your user name.

    - name: Edit the bpftrace.conf file and add the user that you have created
      tags:
        - check_here
      ansible.builtin.lineinfile:
        path: /var/lib/pcp/pmdas/bpftrace/bpftrace.conf
        regexp: '^allowed_users'
        line: "allowed_users = root,metrics"
 
# 
# Install bpftrace PMDA:
# ---
# # cd /var/lib/pcp/pmdas/bpftrace/
# # ./Install
# ---

    - name: Install bpftrace PMDA
      tags:
        - check_here
      ansible.builtin.shell: cd /var/lib/pcp/pmdas/bpftrace/ && ./Install

# ### 
# 
# Install the pcp-pmda-bcc package:
# ---
# # yum install pcp-pmda-bcc
# ---

    - block:

        - name: Install the pcp-pmda-bcc package
          ansible.builtin.command: satellite-maintain packages install -y pcp-pmda-bcc
      
      when: ('pcp-pmda-bcc' not in ansible_facts['packages'])

# Install the bcc PMDA:
# ---
# # cd /var/lib/pcp/pmdas/bcc
# # ./Install
# ---

    - name: Install the bcc PMDA
      tags:
        - check_here
      ansible.builtin.shell: cd /var/lib/pcp/pmdas/bcc && ./Install


#  // Ensure performance copilot is installed
#  ---
#  grafana-cli plugins install performancecopilot-pcp-app
#  systemctl restart grafana-server.service
#  ---

    - name: Ensure performance copilot is installed
      ansible.builtin.shell: grafana-cli plugins install performancecopilot-pcp-app

    - name: Restart the grafana service
      loop:
          - grafana-server.service
      ansible.builtin.service:
        name: "{{ item }}"
        enabled: yes
        state: restarted

#  // To check
#  ---
#  # grafana-cli plugins ls
#  installed plugins:
#  performancecopilot-pcp-app @ 5.0.0
#  Please restart Grafana after installing plugins. Refer to Grafana documentation for instructions if necessary.
#  ---
#  
#  
#  curl -u admin:admin 'http://localhost:3000/api/datasources' -X POST  -H 'content-type: application/json'  --data @pcp_redis.json
#  
#  @pcp_redis.json
#  ---
#  {
#      "name": "PCP Redis",
#      "type": "performancecopilot-redis-datasource",
#      "access": "proxy",
#      "url": "http://localhost:44322",
#      "isDefault": true,
#      "readOnly": false
#  }
#  ---

    - name: Ensure PCP Redis datasource is enabled
      tags:
        - datasource
      ansible.builtin.uri:
        user: admin
        password: admin
        force_basic_auth: true
        url: http://localhost:3000/api/datasources
        method: POST
        body_format: json
        body:
          name: "PCP Redis"
          type: "performancecopilot-redis-datasource"
          access: "proxy"
          url: "http://localhost:44322"
          isDefault: true
          readOnly: false
        headers:
          content-type: application/json


#  curl -u admin:admin 'http://localhost:3000/api/datasources' -X POST  -H 'content-type: application/json'  --data @pcp_vector.json
#  
#  @pcp_vector.json
#  ---
#  {
#      "name": "PCP Vector",
#      "type": "performancecopilot-vector-datasource",
#      "access": "proxy",
#      "url": "http://localhost:44322",
#      "isDefault": true,
#      "readOnly": false
#  }
#  ---
#  
#
    - name: Ensure PCP Vector datasource is enabled
      tags:
        - datasource
      ansible.builtin.uri:
        user: admin
        password: admin
        force_basic_auth: true
        url: http://localhost:3000/api/datasources
        method: POST
        body_format: json
        body:
          name: "PCP Vector"
          type: "performancecopilot-vector-datasource"
          access: "proxy"
          url: "http://localhost:44322"
          isDefault: true
          readOnly: false
        headers:
          content-type: application/json

#  
#  curl -u admin:admin 'http://localhost:3000/api/datasources' -X POST  -H 'content-type: application/json'  --data @pcp_bpf.json
#  
#  @pcp_bpf.json
#  ---
#  {
#      "name": "PCP bpftrace",
#      "type": "performancecopilot-bpftrace-datasource",
#      "access": "proxy",
#      "url": "http://localhost:44322",
#      "basicAuth": true,
#      "isDefault": true,
#      "readOnly": false,
#      "basicAuthUser":"metrics",
#      "secureJsonData":{"basicAuthPassword":"Secret123"}
#  }
#  ---

    - name: Ensure PCP bpftrace datasource is enabled
      tags:
        - datasource
      ansible.builtin.uri:
        user: admin
        password: admin
        force_basic_auth: true
        url: http://localhost:3000/api/datasources
        method: POST
        body_format: json
        body:
          name: "PCP bpftrace"
          type: "performancecopilot-bpftrace-datasource"
          access: "proxy"
          url: "http://localhost:44322"
          basicAuth: true
          isDefault: true
          readOnly: false
          basicAuthUser: metrics
          secureJsonData: {"basicAuthPassword":"Secret123"}
        headers:
          content-type: application/json


